#define BLYNK_TEMPLATE_ID "TMPL3PaD9iS1Z"
#define BLYNK_TEMPLATE_NAME "IOT Rail Track"
#define BLYNK_AUTH_TOKEN "RZ6sSyjedcYSiCmsI9qKnwbNrFvgk5nk"
char auth[] = BLYNK_AUTH_TOKEN;
#include <DHT.h>
#define DHTTYPE  DHT11    
#define DHTPIN 4
DHT dht(DHTPIN, DHTTYPE);
#define trigPin 18
#define echoPin 19
long duration;
int distance;
#define Vibration_Sensor 5
//#include<SoftwareSerial.h>
//#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
//#include <Ethernet.h>
BlynkTimer timer;

// Your WiFi credentials.
char ssid[] = "ABCDE";
char pass[] = "123456789";
#include<LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);
#define Buzzer 23

void setup()
{
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(Vibration_Sensor,INPUT);
  pinMode(Buzzer,OUTPUT);
  digitalWrite(Buzzer,LOW);
  Blynk.begin(auth, ssid, pass);
  lcd.init();
  lcd.begin(16,2);
  lcd.backlight(); 
  lcd.clear();
  lcd.setCursor(0,0);//Soldiers Position Tracking And Health Monitoring System
  lcd.print(" INTELLIGENT  ");
  lcd.setCursor(0,1);
  lcd.print(" IOT SENSING ");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("SYSTEM FOR");
  lcd.setCursor(0,1);
  lcd.print(" RAILWAY VEHICLE ");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(" TRACK CRAKS ");
  lcd.setCursor(0,1);
  lcd.print("DETECTION SYSTEM");
  delay(2000);
}

void loop()
{
    digitalWrite(trigPin, LOW); 
    delayMicroseconds(2);
    // Sets the trigPin on HIGH state for 10 micro seconds
    digitalWrite(trigPin, HIGH); 
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
 // Reads the echoPin, returns the sound wave travel time in microseconds
    distance= duration*0.034/2;
    Serial.print("distance: ");
    Serial.print(distance);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("distance:");
    lcd.setCursor(0,1);
    lcd.print(distance);
    Blynk.virtualWrite(V1, distance);
    delay(1000);

    if(distance >=20)
    {
      digitalWrite(Buzzer,HIGH);
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("CRACK DETECTED");
      delay(1000);
    }

    else
    {
        digitalWrite(Buzzer,LOW);

    }
   int Vibration_Sensor_state = digitalRead(Vibration_Sensor);
//   Serial.print(F("Vibration_Sensor_state: "));
//   Serial.print(Vibration_Sensor_state);
   lcd.clear();
   lcd.setCursor(0,0);
   lcd.print("Vibration_state:");
   lcd.setCursor(0,1);
   lcd.print(Vibration_Sensor_state);
   Blynk.virtualWrite(V0, Vibration_Sensor_state);
   delay(1000);

    if(Vibration_Sensor_state ==1)
    {
      digitalWrite(Buzzer,HIGH);
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("VIBRATIONS DETECTED");
      delay(1000);
    }

    else
    {
        digitalWrite(Buzzer,LOW);

    }
   float temperature = dht.readTemperature(); 
   Serial.print("Temperature: ");
   Serial.print(temperature);
   Serial.println("Â°C");
   lcd.clear();
   lcd.setCursor(0,0);
   lcd.print("Temperature:");
   lcd.setCursor(0,1);
   lcd.print(temperature);
   Blynk.virtualWrite(V2, temperature);
   delay(1000);

    if(temperature >=32)
    {
      digitalWrite(Buzzer,HIGH);
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("TEMPERATURE HIGH");
      delay(1000);
    }

    else
    {
        digitalWrite(Buzzer,LOW);

    }
   float humidity = dht.readHumidity(); 
   Serial.print("Humidity: ");
   Serial.print(humidity);
   lcd.clear();
   lcd.setCursor(0,0);
   lcd.print("Humidity:");
   lcd.setCursor(0,1);
   lcd.print(humidity);
   delay(1000);
   Blynk.run();
   timer.run();
}
